/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mpes.sorteio.calendario.jornadas.liga.portugal.gui;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import mpes.sorteio.calendario.jornadas.liga.portugal.model.Championship;
import mpes.sorteio.calendario.jornadas.liga.portugal.model.Team;

/**
 *
 * @author vitorsantos
 */
public class SingleTeamWindow extends javax.swing.JFrame {

    private Championship c;
    private Team editableTeam;
    private DefaultListModel dlm;
    private String errorMsg = "";

    /**
     * Creates new form SingleTeamWindow
     */
    public SingleTeamWindow(Championship newC) {
        c = newC;
        initComponents();
    }

    public SingleTeamWindow(Championship newC, Team newEditableTeam) {
        c = newC;
        editableTeam = newEditableTeam;
        initComponents();

        teamNameTextField.setText(editableTeam.getTeamName());
        teamTypeComboBox.setSelectedItem((String) editableTeam.getTeamType());
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        singleTeamPanel = new javax.swing.JPanel();
        teamNameLabel = new javax.swing.JLabel();
        teamNameTextField = new javax.swing.JTextField();
        teamTypeLabel = new javax.swing.JLabel();
        teamTypeComboBox = new javax.swing.JComboBox();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        neighbourTeamsLabel = new javax.swing.JLabel();
        neighbourTeamsScrollPane = new javax.swing.JScrollPane();
        neighbourTeamsList = new javax.swing.JList();
        dlm = new DefaultListModel();

        if (editableTeam != null) {
            for (String nt : editableTeam.getNeighbourTeams()) {
                dlm.addElement(nt);
            }
        }

        neighbourTeamsList = new JList(dlm);
        addNeighbourTeamButton = new javax.swing.JButton();
        removeNeighbourTeamButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        teamNameLabel.setText("Nome:");

        teamTypeLabel.setText("Tipo:");

        teamTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccionar...", "Equipa Grande", "Equipa Pequena", "Equipa \"B\" Grande", "Equipa \"B\"" }));

        okButton.setText("OK");
        okButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                acceptChangesAction(evt);
            }
        });

        cancelButton.setText("Cancelar");
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelAction(evt);
            }
        });

        neighbourTeamsLabel.setText("Equipas Pr√≥ximas Geograficamente");

        neighbourTeamsScrollPane.setViewportView(neighbourTeamsList);

        addNeighbourTeamButton.setText("Adicionar");
        addNeighbourTeamButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addNeighbourTeamAction(evt);
            }
        });

        removeNeighbourTeamButton.setText("Remover");
        removeNeighbourTeamButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeNeighbourTeamAction(evt);
            }
        });

        org.jdesktop.layout.GroupLayout singleTeamPanelLayout = new org.jdesktop.layout.GroupLayout(singleTeamPanel);
        singleTeamPanel.setLayout(singleTeamPanelLayout);
        singleTeamPanelLayout.setHorizontalGroup(
            singleTeamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, singleTeamPanelLayout.createSequentialGroup()
                .add(35, 35, 35)
                .add(singleTeamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(singleTeamPanelLayout.createSequentialGroup()
                        .add(addNeighbourTeamButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(removeNeighbourTeamButton))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, singleTeamPanelLayout.createSequentialGroup()
                        .add(teamTypeLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(teamTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 219, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(singleTeamPanelLayout.createSequentialGroup()
                        .add(11, 11, 11)
                        .add(cancelButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(okButton)
                        .add(25, 25, 25))
                    .add(singleTeamPanelLayout.createSequentialGroup()
                        .add(teamNameLabel)
                        .add(52, 52, 52)
                        .add(teamNameTextField))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, neighbourTeamsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE))
                .add(30, 30, 30))
            .add(singleTeamPanelLayout.createSequentialGroup()
                .add(67, 67, 67)
                .add(neighbourTeamsLabel)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        singleTeamPanelLayout.setVerticalGroup(
            singleTeamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(singleTeamPanelLayout.createSequentialGroup()
                .add(37, 37, 37)
                .add(singleTeamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(teamNameLabel)
                    .add(teamNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(32, 32, 32)
                .add(neighbourTeamsLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(neighbourTeamsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(singleTeamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(addNeighbourTeamButton)
                    .add(removeNeighbourTeamButton))
                .add(29, 29, 29)
                .add(singleTeamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(teamTypeLabel)
                    .add(teamTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(singleTeamPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cancelButton)
                    .add(okButton))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, singleTeamPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(singleTeamPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void acceptChangesAction(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_acceptChangesAction
        if (!((String) teamTypeComboBox.getSelectedItem()).equals("Seleccionar...")) {
            if (editableTeam == null) {
                if (newEntryValidation()) {
                    this.setVisible(false);
                    new MainWindow(c).setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this,
                            errorMsg,
                            "Erro",
                            JOptionPane.ERROR_MESSAGE);
                }
            } else if (editableTeam != null) {
                if (editEntryValidation()) {
                    this.setVisible(false);
                    new MainWindow(c).setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this,
                            errorMsg,
                            "Erro",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Dever√° seleccionar um tipo para a equipa.",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_acceptChangesAction

    private void cancelAction(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelAction
        this.setVisible(false);
        new MainWindow(c).setVisible(true);
    }//GEN-LAST:event_cancelAction

    private void addNeighbourTeamAction(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addNeighbourTeamAction
        String team = (String) JOptionPane.showInputDialog(
                this,
                "Insira o nome da equipa geograficamente pr√≥xima:",
                "Inserir nome",
                JOptionPane.INFORMATION_MESSAGE,
                null,
                null,
                "");

        if ((team != null) && (!(team.length() <= 0))) {
            dlm.addElement(team);
        } else {
            JOptionPane.showMessageDialog(this,
                    "Dever√° escrever um nome para esta equipa.",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addNeighbourTeamAction

    private void removeNeighbourTeamAction(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeNeighbourTeamAction
        String teamToDelete = (String) neighbourTeamsList.getSelectedValue();
        
        if (teamToDelete != null && !teamToDelete.equals("")) {
            Object[] options = {"Sim", "N√£o"};
            int optionIndex = JOptionPane.showOptionDialog(this,
                    "Tem a certeza desta opera√ß√£o?",
                    "Confirma√ß√£o de Ac√ß√£o",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

            if (optionIndex == JOptionPane.YES_OPTION) {
                for (int i = 0; i < dlm.size(); i++) {
                    if (teamToDelete.equalsIgnoreCase((String) dlm.elementAt(i))) {
                        dlm.removeElementAt(i);
                    }
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(this,
                    "Dever√° seleccionar uma equipa para elimina√ß√£o.",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removeNeighbourTeamAction
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNeighbourTeamButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel neighbourTeamsLabel;
    private javax.swing.JList neighbourTeamsList;
    private javax.swing.JScrollPane neighbourTeamsScrollPane;
    private javax.swing.JButton okButton;
    private javax.swing.JButton removeNeighbourTeamButton;
    private javax.swing.JPanel singleTeamPanel;
    private javax.swing.JLabel teamNameLabel;
    private javax.swing.JTextField teamNameTextField;
    private javax.swing.JComboBox teamTypeComboBox;
    private javax.swing.JLabel teamTypeLabel;
    // End of variables declaration//GEN-END:variables

    private boolean newEntryValidation() {
        String newTeamName = teamNameTextField.getText();

        try {
            if (newTeamName.equals("")) {
                throw new IllegalArgumentException("Dever√° inserir uma equipa com um nome diferente de vazio.");
            }

            for (Team t : c.getTeams()) {
                if (t.getTeamName().equalsIgnoreCase(newTeamName)) {
                    throw new IllegalArgumentException("Dever√° inserir uma equipa com um nome diferente de uma j√° existente.");
                }
            }

            ArrayList<String> neighbourTeams = validatingAndInsertingNeighbourTeams();

            c.getTeams().add(new Team(newTeamName, neighbourTeams, (String) teamTypeComboBox.getSelectedItem()));
            return true;
        } catch (IllegalArgumentException e) {
            errorMsg = e.getMessage();
            return false;
        }
    }

    private boolean editEntryValidation() {
        String editTeamName = teamNameTextField.getText();

        try {
            for (Team t : c.getTeams()) {
                if (t.getTeamName().equalsIgnoreCase(editTeamName)) {
                    t.setTeamName(editTeamName);
                    ArrayList<String> neighbourTeams = validatingAndInsertingNeighbourTeams();

                    t.setNeighbourTeams(neighbourTeams);
                    t.setTeamType((String) teamTypeComboBox.getSelectedItem());

                    return true;
                }
            }

            throw new IllegalArgumentException("Dever√° alterar uma equipa j√° existente.");
        } catch (IllegalArgumentException e) {
            errorMsg = e.getMessage();
            return false;
        }
    }

    private ArrayList<String> validatingAndInsertingNeighbourTeams() {
        ArrayList<String> neighbourTeams = new ArrayList<String>();

        for (int i = 0; i < neighbourTeamsList.getModel().getSize(); i++) {
            boolean foundTeam = false;
            final String newTeamToAdd = (String) neighbourTeamsList.getModel().getElementAt(i);

            for (int j = 0; j < c.getTeams().size(); j++) {
                if (newTeamToAdd.equalsIgnoreCase(c.getTeams().get(j).getTeamName())) {
                    foundTeam = true;
                    break;
                }
            }

            if (!foundTeam) {
                throw new IllegalArgumentException("Dever√° inserir uma equipa vizinha que j√° exista no campeonato.");
            } else {
                neighbourTeams.add(newTeamToAdd);
            }
        }

        return neighbourTeams;
    }
}
